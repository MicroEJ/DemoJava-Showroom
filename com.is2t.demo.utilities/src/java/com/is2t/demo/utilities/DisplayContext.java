/*
 * Java
 *
 * Copyright 2013-2014 IS2T. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be found at http://www.is2t.com/open-source-bsd-license/.
 */
package com.is2t.demo.utilities;

import com.is2t.demo.utilities.errors.ErrorHandler;

import ej.microui.io.Display;

// to be integrated in MicroUI?
public class DisplayContext {

	// manage several displays ?
	private static final DisplayContext DISPLAY_CONTEXT = getDisplayContext();

	private final Display display;

	private Thread displayThread;
	private ErrorHandler errorHandler;

	public DisplayContext(Display display) {
		this.display = display;
	}

	/**
	 * Sets an error handler that will receive all uncaught exceptions generated by the executed runnables.
	 * 
	 * @param errorHandler
	 *            the error handler to set.
	 */
	public void setErrorHandler(ErrorHandler errorHandler) {
		this.errorHandler = errorHandler;
	}

	/**
	 * Executes the runnable in the display context.
	 * <p>
	 * If the current thread is the display one, the runnable is executed in this context. Otherwise, it is executed
	 * asynchronously using {@link Display#callSerially(Runnable)}.
	 * 
	 * @param runnable
	 *            the runnable to execute.
	 */
	public void call(final Runnable runnable) {
		if (Thread.currentThread() != displayThread || displayThread == null) {
			display.callSerially(new Runnable() {
				@Override
				public void run() {
					// the first time, retrieve the display thread
					displayThread = Thread.currentThread();
					execute(runnable);
				}
			});
		} else {
			execute(runnable);
		}
	}

	private void execute(Runnable runnable) {
		try {
			runnable.run();
		} catch (Throwable t) {
			if (errorHandler != null) {
				errorHandler.uncaughtException(t);
			}
		}
	}

	public static DisplayContext getDisplayContext() {
		return DISPLAY_CONTEXT;
	}
}
