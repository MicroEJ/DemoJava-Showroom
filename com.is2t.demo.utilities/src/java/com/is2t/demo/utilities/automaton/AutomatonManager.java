/*
 * Java
 *
 * Copyright 2014 IS2T. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be found at http://www.is2t.com/open-source-bsd-license/.
 */
package com.is2t.demo.utilities.automaton;

import com.is2t.demo.utilities.activity.ActivitySupervisor;
import com.is2t.demo.utilities.errors.ErrorHandler;

import ej.bon.Timer;

/**
 * Starts an automaton that simulates user interaction.
 * <p>
 * It can be started immediately of after a period of inactivity.
 */
public interface AutomatonManager<R extends Automaton> {

	/**
	 * Sets an activity supervisor.
	 * 
	 * @param activitySupervisor
	 *            the activity supervisor.
	 */
	void setActivitySupervisor(ActivitySupervisor activitySupervisor);

	/**
	 * Sets the automaton factory that will create and stop the robot.
	 * 
	 * @param automatonFactory
	 *            the automaton factory to set.
	 */
	void setAutomatonFactory(AutomatonFactory<R> automatonFactory);

	/**
	 * Sets the timer to schedule the automaton on.
	 * 
	 * @param timer
	 *            the timer to schedule on.
	 */
	void setTimer(Timer timer);

	/**
	 * Starts automaton.
	 * <p>
	 * If an activity supervisor is declared, the automaton is started after a period of inactivity, and stopped when an
	 * activity is detected.
	 * 
	 * @see ActivitySupervisor
	 */
	void arm();

	/**
	 * Stops the automaton.
	 * <p>
	 * If an activity supervisor is declared, it is also stopped.
	 */
	void stop();

	/**
	 * Sets an error handler that will receive all uncaught exceptions generated by the automaton factory or the
	 * automaton.
	 * 
	 * @param errorHandler
	 *            the error handler to set.
	 */
	void setErrorHandler(ErrorHandler errorHandler);

}
